name: Update JIRA Fix versions

on:
  create:
    tags: true

jobs:
  extract-data:
    runs-on: ubuntu-latest
    outputs:
      fix_version: ${{ steps.extract.outputs.fix_version }}
      tickets: ${{ steps.extract.outputs.tickets }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract the ticket numbers to be updated in Jira
        id: extract
        run: |
          set -euo pipefail
          
          TAG_PREFIX="core-"
      
          NEW_TAG="${GITHUB_REF#refs/tags/}"
          echo "New tag: $NEW_TAG"
          FIX_VERSION="${NEW_TAG#${TAG_PREFIX}}"

          if [[ "$NEW_TAG" =~ ^(${TAG_PREFIX}[0-9]+\.) ]]; then
            SERIES_PREFIX="${BASH_REMATCH[1]}"
            echo "Detected series prefix: $SERIES_PREFIX"
          else
            echo "Tag '$NEW_TAG' does not match expected format '${TAG_PREFIX}<YEAR>.' — exiting."
            exit 1
          fi

          mapfile -t SERIES_TAGS < <(git tag --list "${SERIES_PREFIX}*" | sort -rV)

          echo "Tags in the series (sorted descending):"
          for tag in "${SERIES_TAGS[@]}"; do
            echo "   - $tag"
          done

          echo "Finding index of current tag '$NEW_TAG' in the series tags list."
          CURRENT_INDEX=-1
          for i in "${!SERIES_TAGS[@]}"; do
            echo "Comparing with: ${SERIES_TAGS[$i]}"
            if [[ "${SERIES_TAGS[$i]}" == "$NEW_TAG" ]]; then
              CURRENT_INDEX=$i
              echo "Found at index: $CURRENT_INDEX"
              break
            fi
          done

          # Handle error if tag not found
          if (( CURRENT_INDEX == -1 )); then
            echo "Could not find tag '$NEW_TAG' in series — aborting."
            exit 1
          fi

          # Check if there's a previous tag
          if (( CURRENT_INDEX + 1 >= ${#SERIES_TAGS[@]} )); then
            echo "No earlier tag in the same series — nothing to compare."
            exit 0
          fi

          PREVIOUS_TAG="${SERIES_TAGS[$((CURRENT_INDEX + 1))]}"
          echo "Previous tag in series: $PREVIOUS_TAG"

          echo "Commits list between tags $PREVIOUS_TAG and $NEW_TAG:"
          COMMITS=$(git log --pretty=format:'%h %s' "$PREVIOUS_TAG..$NEW_TAG")
          echo "$COMMITS"
          
          echo "Extracted JIRA ticket references (format: MTM-<digits>) to be updated with tag ${FIX_VERSION}:"
          TICKETS=$(echo "$COMMITS" | grep -oE 'MTM-[0-9]+' | sort -u | paste -sd "," -)
          echo "$TICKETS"

          echo "fix_version=$FIX_VERSION" >> $GITHUB_OUTPUT
          echo "tickets=$TICKETS" >> $GITHUB_OUTPUT


      - name: Update Fix versions field for each JIRA ticket
#        env:
#          JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
#          JIRA_EMAIL: ${{ secrets.JIRA_EMAIL }}
#          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
        run: |
          FIX_VERSION="${{ steps.extract.outputs.fix_version }}"
          echo "${{ steps.extract.outputs.tickets }}" | tr ',' '\n' | while read -r TICKET; do
            echo "Updating ticket: $TICKET with fix values: $FIX_VERSION"
          done

#      - uses: Cumulocity-IoT/jira-bot@v1.1.1
#        if: ${{ steps.extract_issue_key.outputs.issue_key != '' }}
#        with:
#          jira-url: https://cumulocity.atlassian.net
#          jira-username: "${{ secrets.JIRA_USERNAME }}"
#          jira-api-token: "${{ secrets.JIRA_TOKEN }}"
#          ticket-number:  ${{ steps.extract_issue_key.outputs.issue_key }}
#          version-name: ${{ steps.chartVersion.outputs.data }}
#          build-artifact: ontoplb
#          exclude-patterns: "L2S-[0-9]+"



#  prepare-matrix:
#    needs: extract-list-of-ticket-numbers
#    runs-on: ubuntu-latest
#    outputs:
#      matrix: ${{ steps.set-matrix.outputs.matrix }}
#    steps:
#      - name: Convert ticket_list to matrix
#        id: set-matrix
#        run: |
#          TICKETS="${{ needs.extract-list-of-ticket-numbers.outputs.ticket_list }}"
#          echo "TICKETS=$TICKETS"
#          JSON=$(echo "$TICKETS" | tr ',' '\n' | jq -R . | jq -s 'map({ticket: .})')
#          echo "matrix={\"include\": $JSON}" >> $GITHUB_OUTPUT
#
#  update-jira:
#    needs: prepare-matrix
#    runs-on: ubuntu-latest
#    strategy:
#      matrix: ${{ fromJson(needs.prepare-matrix.outputs.matrix) }}
#    steps:
#      - name: Set JIRA Fix versions
#        id: chartVersion
#        run: echo "data=${{ needs.update-jira-fix-versions.outputs.fix_version }}" >> "$GITHUB_OUTPUT"
#
#      - name: Run jira-bot for each ticket
#        uses: Cumulocity-IoT/jira-bot@v1.1.1
#        with:
#          jira-url: https://cumulocity.atlassian.net
#          jira-username: "${{ secrets.JIRA_USERNAME }}"
#          jira-api-token: "${{ secrets.JIRA_TOKEN }}"
#          ticket-number: ${{ matrix.ticket }}
#          version-name: ${{ steps.chartVersion.outputs.data }}
#          build-artifact: ontoplb
#          exclude-patterns: "L2S-[0-9]+"
