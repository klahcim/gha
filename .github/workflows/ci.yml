name: Update JIRA Fix versions

on:
  create:
    tags: true

jobs:
  extract-data:
    runs-on: ubuntu-latest
    outputs:
      fix_version: ${{ steps.extract.outputs.fix_version }}
      tickets: ${{ steps.extract.outputs.tickets }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract the ticket numbers and fix version to be updated in Jira
        id: extract
        run: |
          set -euo pipefail
          
          TAG_PREFIX="core-"
      
          NEW_TAG="${GITHUB_REF#refs/tags/}"
          echo "New tag: $NEW_TAG"
          FIX_VERSION="${NEW_TAG#${TAG_PREFIX}}"

          if [[ "$NEW_TAG" =~ ^(${TAG_PREFIX}[0-9]+\.) ]]; then
            SERIES_PREFIX="${BASH_REMATCH[1]}"
            echo "Detected series prefix: $SERIES_PREFIX"
          else
            echo "Tag '$NEW_TAG' does not match expected format '${TAG_PREFIX}<YEAR>.' — exiting."
            exit 1
          fi

          mapfile -t SERIES_TAGS < <(git tag --list "${SERIES_PREFIX}*" | sort -rV)

          echo "Tags in the series (sorted descending):"
          for tag in "${SERIES_TAGS[@]}"; do
            echo "   - $tag"
          done

          echo "Finding index of current tag '$NEW_TAG' in the series tags list."
          CURRENT_INDEX=-1
          for i in "${!SERIES_TAGS[@]}"; do
            echo "Comparing with: ${SERIES_TAGS[$i]}"
            if [[ "${SERIES_TAGS[$i]}" == "$NEW_TAG" ]]; then
              CURRENT_INDEX=$i
              echo "Found at index: $CURRENT_INDEX"
              break
            fi
          done

          # Handle error if tag not found
          if (( CURRENT_INDEX == -1 )); then
            echo "Could not find tag '$NEW_TAG' in series — aborting."
            exit 1
          fi

          # Check if there's a previous tag
          if (( CURRENT_INDEX + 1 >= ${#SERIES_TAGS[@]} )); then
            echo "No earlier tag in the same series — nothing to compare."
            exit 0
          fi

          PREVIOUS_TAG="${SERIES_TAGS[$((CURRENT_INDEX + 1))]}"
          echo "Previous tag in series: $PREVIOUS_TAG"

          echo "Commits list between tags $PREVIOUS_TAG and $NEW_TAG:"
          COMMITS=$(git log --pretty=format:'%h %s' "$PREVIOUS_TAG..$NEW_TAG")
          echo "$COMMITS"
          
          echo "Extracted JIRA ticket references (format: MTM-<digits>) to be updated with tag ${FIX_VERSION}:"
          TICKETS=$(echo "$COMMITS" | grep -oE 'MTM-[0-9]+' | sort -u | paste -sd "," -)
          echo "$TICKETS"

          echo "fix_version=$FIX_VERSION" >> $GITHUB_OUTPUT
          echo "tickets=$TICKETS" >> $GITHUB_OUTPUT

  prepare-data:
    needs: extract-data
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.prepare.outputs.matrix }}
    steps:
      - name: Prepare ticket matrix from tickets list
        id: prepare
        run: |
          tickets="${{ needs.extract-data.outputs.tickets }}"
          if [[ -z "$tickets" ]]; then
            echo "matrix=[]" >> $GITHUB_OUTPUT
          else
            json_array=$(jq -n --arg tickets "$tickets" '$tickets | split(",")')
            echo "matrix=$json_array" >> $GITHUB_OUTPUT
          fi

  update-jira:
    needs: [extract-data, prepare-data]
    if: needs.prepare.outputs.matrix != '[]'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        ticket: ${{ fromJson(needs.prepare-matrix.outputs.matrix) }}
    steps:
      - name: Run jira-bot for updating the ticket ${{ matrix.ticket }} with fix version ${{ needs.extract-data.outputs.fix_version }}
        uses: Cumulocity-IoT/jira-bot@v1.1.1
        with:
          jira-url: https://cumulocity.atlassian.net
          jira-username: "${{ secrets.JIRA_USERNAME }}"
          jira-api-token: "${{ secrets.JIRA_TOKEN }}"
          ticket-number: ${{ matrix.ticket }}
          version-name: ${{ needs.extract-data.outputs.fix_version }}